//
//  LHADataFormat.cs - provides a DataFormat for manipulating archives in LHA format
//
//  Author:
//       Michael Becker <alcexhim@gmail.com>
//
//  Copyright (c) 2011-2020 Mike Becker's Software
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using System;

using UniversalEditor.IO;
using UniversalEditor.ObjectModels.FileSystem;

namespace UniversalEditor.DataFormats.FileSystem.LHA
{
	/// <summary>
	/// Provides a <see cref="DataFormat" /> for manipulating archives in LHA format.
	/// </summary>
	public class LHADataFormat : DataFormat
	{
		private static DataFormatReference _dfr;
		protected override DataFormatReference MakeReferenceInternal()
		{
			if (_dfr == null)
			{
				_dfr = base.MakeReferenceInternal();
				_dfr.Capabilities.Add(typeof(FileSystemObjectModel), DataFormatCapabilities.All);
			}
			return _dfr;
		}

		protected override void LoadInternal(ref ObjectModel objectModel)
		{
			FileSystemObjectModel fsom = (objectModel as FileSystemObjectModel);
			if (fsom == null) throw new ObjectModelNotSupportedException();

			Reader reader = base.Accessor.Reader;
			while (!reader.EndOfStream)
			{
				byte headerSize = reader.ReadByte();
				byte headerChecksum = reader.ReadByte();

				if (headerSize == 128 && headerChecksum == 0 && reader.PeekByte() == 0)
				{
					// why is there a 0x80, 0x00, 0x00 at the end of the file (at least generated by IZArc)?
					break;
				}

				string compressionMethod = reader.ReadFixedLengthString(5);
				uint compressedSize = reader.ReadUInt32();
				uint decompressedSize = reader.ReadUInt32();
				uint originalFileDateTime = reader.ReadUInt32();
				byte fileOrDirectoryAttribute = reader.ReadByte();
				byte levelIdentifier = reader.ReadByte();
				byte fileNameLength = reader.ReadByte();
				string fileName = reader.ReadFixedLengthString(fileNameLength);
				short crc = reader.ReadInt16();

				long offset = base.Accessor.Position;
				base.Accessor.Seek(compressedSize, SeekOrigin.Current);

				File file = fsom.AddFile(fileName);
				file.Size = decompressedSize;
				file.Properties.Add("reader", reader);
				file.Properties.Add("CompressedSize", compressedSize);
				file.Properties.Add("DecompressedSize", decompressedSize);
				file.Properties.Add("CompressionMethod", compressionMethod);
				file.Properties.Add("FileAttribute", fileOrDirectoryAttribute);
				file.Properties.Add("offset", offset);
				file.DataRequest += file_DataRequest;
			}
		}

		private void file_DataRequest(object sender, DataRequestEventArgs e)
		{
			File file = (sender as File);
			Reader reader = (Reader)file.Properties["reader"];
			uint compressedSize = (uint)file.Properties["CompressedSize"];
			uint decompressedSize = (uint)file.Properties["DecompressedSize"];
			string compressionMethod = (string)file.Properties["CompressionMethod"];
			byte fileAttribute = (byte)file.Properties["FileAttribute"];
			long offset = (long)file.Properties["offset"];

			reader.Seek(offset, SeekOrigin.Begin);
			byte[] compressedData = reader.ReadBytes(compressedSize);
			byte[] decompressedData = compressedData;
			switch (compressionMethod)
			{
			case "-lh0-":
				{
					// store, no compression
					decompressedData = compressedData;
					break;
				}
			}
			e.Data = decompressedData;
		}

		protected override void SaveInternal(ObjectModel objectModel)
		{
			FileSystemObjectModel fsom = (objectModel as FileSystemObjectModel);
			if (fsom == null) throw new ObjectModelNotSupportedException();

			Writer writer = base.Accessor.Writer;
			File[] files = fsom.GetAllFiles();
			foreach (File file in files)
			{
				byte headerSize = 34;
				writer.WriteByte(headerSize);
				byte headerChecksum = 0;
				writer.WriteByte(headerChecksum);

				string compressionMethod = "-lh0-";
				writer.WriteFixedLengthString(compressionMethod);

				byte[] decompressedData = file.GetData();
				byte[] compressedData = decompressedData;
				switch (compressionMethod)
				{
				case "-lh0-":
					{
						break;
					}
				}

				DateTime originalFileDateTime = DateTime.Today;
				writer.WriteUInt32((uint)compressedData.Length);
				writer.WriteUInt32((uint)decompressedData.Length);
				writer.WriteUInt32((uint)0); // original file date/time
				byte fileOrDirectoryAttribute = 32;
				writer.WriteByte(fileOrDirectoryAttribute);

				byte levelIdentifier = 0;
				writer.WriteByte(levelIdentifier);

				byte fileNameLength = (byte)file.Name.Length;
				string fileName = file.Name.Substring(0, Math.Min(file.Name.Length, fileNameLength));
				writer.WriteByte(fileNameLength);
				writer.WriteFixedLengthString(fileName);

				short crc = 0;
				writer.WriteInt16(crc);

				writer.WriteBytes(compressedData);
			}

			writer.WriteByte(128);
			writer.WriteByte(0);
			writer.WriteByte(0);
		}
	}
}
